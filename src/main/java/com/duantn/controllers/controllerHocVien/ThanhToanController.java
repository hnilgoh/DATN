package com.duantn.controllers.controllerHocVien;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.duantn.dtos.GiaoDichRequest;
import com.duantn.entities.DangHoc;
import com.duantn.entities.DoanhThuGiangVien;
import com.duantn.entities.GiaoDichKhoaHoc;
import com.duantn.entities.GiaoDichKhoaHocChiTiet;
import com.duantn.entities.KhoaHoc;
import com.duantn.entities.TaiKhoan;
import com.duantn.entities.ThongBao;
import com.duantn.entities.ThuNhapNenTang;
import com.duantn.enums.HinhThucThanhToan;
import com.duantn.enums.LoaiThongBao;
import com.duantn.enums.TrangThaiGiaoDich;
import com.duantn.repositories.DangHocRepository;
import com.duantn.repositories.DoanhThuGiangVienRepository;
import com.duantn.repositories.GiaoDichKhoaHocChiTietRepository;
import com.duantn.repositories.GiaoDichKhoaHocRepository;
import com.duantn.repositories.KhoaHocRepository;
import com.duantn.repositories.ThongBaoRepository;
import com.duantn.repositories.ThuNhapNenTangRepository;
import com.duantn.services.AuthService;
import com.duantn.services.EmailThanhToanThanhCongService;
import com.duantn.services.KhoaHocService;

import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@Controller
@RequestMapping("/hoc-vien")
public class ThanhToanController {

    @Autowired
    private KhoaHocService khoaHocService;

    @Autowired
    private GiaoDichKhoaHocChiTietRepository giaoDichChiTietRepo;

    @Autowired
    private GiaoDichKhoaHocRepository giaoDichKhoaHocRepository;

    @Autowired
    private DangHocRepository dangHocRepository;

    @Autowired
    private KhoaHocRepository khoaHocRepo;

    @Autowired
    private ThongBaoRepository thongBaoRepository;

    @Autowired
    private DoanhThuGiangVienRepository doanhThuGiangVienRepository;

    @Autowired
    private EmailThanhToanThanhCongService emailThanhToanThanhCongService;

    @Autowired
    private ThuNhapNenTangRepository thuNhapNenTangRepository;

    @Autowired
    private AuthService authService;

    @GetMapping("/thanh-toan")
    public String hienThiThanhToan(@RequestParam("khoahocId") List<Integer> ids, Model model) {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        TaiKhoan tk = authService.getTaiKhoanFromAuth(auth);

        if (tk == null) {
            return "redirect:/auth/dangnhap";
        }

        List<KhoaHoc> dsKhoaHoc = khoaHocService.findAllByIds(ids);

        BigDecimal tongTien = dsKhoaHoc.stream()
                .map(KhoaHoc::getGiaHienTai)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // L∆∞u giao d·ªãch s∆° b·ªô
        GiaoDichKhoaHoc giaoDich = GiaoDichKhoaHoc.builder()
                .tongtien(tongTien)
                .tenhocvien(tk.getName())
                .taikhoan(tk)
                .trangthai(TrangThaiGiaoDich.CHO_XU_LY)
                .hinhThucThanhToan(HinhThucThanhToan.SmartBanking)
                .build();

        giaoDichKhoaHocRepository.save(giaoDich);

        // Truy·ªÅn giaoDichId sang giao di·ªán (n·∫øu c·∫ßn d√πng l·∫°i)
        model.addAttribute("giaoDichId", giaoDich.getGiaodichId());

        List<Integer> khoaHocIds = dsKhoaHoc.stream()
                .map(KhoaHoc::getKhoahocId)
                .toList();

        model.addAttribute("khoaHocIds", khoaHocIds);
        model.addAttribute("dsKhoaHoc", dsKhoaHoc);
        model.addAttribute("tongTien", tongTien);

        return "views/gdienHocVien/thanh-toan";
    }

    @PostMapping("/api/thanh-toan/thanh-cong")
    public ResponseEntity<?> xuLyThanhToanThanhCong(@RequestBody GiaoDichRequest request) {
        Integer giaoDichId = Integer.valueOf(request.getGiaoDichId()); // ho·∫∑c parseInt()
        Optional<GiaoDichKhoaHoc> optionalGDKH = giaoDichKhoaHocRepository.findById(giaoDichId);

        if (optionalGDKH.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Kh√¥ng t√¨m th·∫•y giao d·ªãch");
        }

        GiaoDichKhoaHoc giaoDichKH = optionalGDKH.get();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch th√†nh HOAN_THANH
        giaoDichKH.setTrangthai(TrangThaiGiaoDich.HOAN_THANH);
        giaoDichKhoaHocRepository.save(giaoDichKH);

        TaiKhoan taiKhoan = giaoDichKH.getTaikhoan(); // L·∫•y t√†i kho·∫£n t·ª´ giao d·ªãch

        for (Integer khoaHocId : request.getKhoaHocIds()) {
            Optional<KhoaHoc> optionalKH = khoaHocRepo.findById(khoaHocId);
            if (optionalKH.isPresent()) {
                KhoaHoc kh = optionalKH.get();

                GiaoDichKhoaHocChiTiet chiTiet = new GiaoDichKhoaHocChiTiet();
                chiTiet.setGiaoDichKhoaHoc(giaoDichKH);
                chiTiet.setKhoahoc(kh);
                chiTiet.setDongia(kh.getGiaHienTai()); // ho·∫∑c kh.getGiaGoc()

                giaoDichChiTietRepo.save(chiTiet);

                // T·∫°o b·∫£n ghi v√†o b·∫£ng DangHoc
                DangHoc dangHoc = DangHoc.builder()
                        .taikhoan(taiKhoan)
                        .khoahoc(kh)
                        .dongia(kh.getGiaHienTai())
                        .trangthai(false)
                        .daCap_ChungChi(false)
                        .build();
                dangHocRepository.save(dangHoc);

                ThongBao thongBao = ThongBao.builder()
                        .tieuDe("‚úÖ Thanh to√°n th√†nh c√¥ng kh√≥a h·ªçc: " + kh.getTenKhoaHoc())
                        .noiDung("üéâ Kh√≥a h·ªçc \"" + kh.getTenKhoaHoc()
                                + "\" ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch kh√≥a h·ªçc c·ªßa b·∫°n. "
                                + "B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu h·ªçc ngay ho·∫∑c xem chi ti·∫øt kh√≥a h·ªçc t·∫°i "
                                + "<a href='/hoc-vien/hoc-tap?tab=hoc-tap'>ƒë√¢y</a>.")
                        .loaiThongBao(LoaiThongBao.THONG_BAO_CHUNG)
                        .nguoiNhan(List.of(taiKhoan))
                        .build();

                thongBaoRepository.save(thongBao);

                // ‚ûï Sau khi ƒë√£ l∆∞u DangHoc, l∆∞u lu√¥n DoanhThu
                BigDecimal tiLeHoaHong = BigDecimal.valueOf(0.7); // 70% hoa h·ªìng
                BigDecimal tienNhan = kh.getGiaHienTai().multiply(tiLeHoaHong); // T√≠nh ti·ªÅn gi·∫£ng vi√™n nh·∫≠n ƒë∆∞·ª£c

                DoanhThuGiangVien doanhThu = DoanhThuGiangVien.builder()
                        .sotiennhan(tienNhan) // Ti·ªÅn s·∫Ω tr·∫£ cho gi·∫£ng vi√™n
                        .tenGiangVien(kh.getGiangVien().getTaikhoan().getName()) // L∆∞u t√™n gi·∫£ng vi√™n ƒë·ªÉ hi·ªÉn th·ªã
                        .taikhoanGV(kh.getGiangVien().getTaikhoan()) // Li√™n k·∫øt t·ªõi t√†i kho·∫£n gi·∫£ng vi√™n
                        .dangHoc(dangHoc) // G·∫Øn v·ªõi h·ªçc vi√™n ƒëang h·ªçc kh√≥a ƒë√≥
                        .build();

                doanhThuGiangVienRepository.save(doanhThu); // L∆∞u v√†o DB

                // ‚úÖ T√≠nh ph·∫ßn thu nh·∫≠p n·ªÅn t·∫£ng (30%)
                BigDecimal tiLeNenTang = BigDecimal.valueOf(0.3);
                BigDecimal tienNenTang = kh.getGiaHienTai().multiply(tiLeNenTang);

                // ‚úÖ T·∫°o b·∫£n ghi thu nh·∫≠p n·ªÅn t·∫£ng
                ThuNhapNenTang thuNhapNenTang = ThuNhapNenTang.builder()
                        .sotiennhan(tienNenTang)
                        .dangHoc(dangHoc)
                        .tenKhoaHoc(kh.getTenKhoaHoc())
                        .thuocGiangVien(kh.getGiangVien().getTaikhoan().getName())
                        .build();

                thuNhapNenTangRepository.save(thuNhapNenTang); // ‚úÖ L∆∞u v√†o DB

            }
        }

        // L·∫•y danh s√°ch kh√≥a h·ªçc t·ª´ danh s√°ch ID g·ª≠i l√™n
        List<KhoaHoc> dsKhoaHoc = khoaHocService.findAllByIds(request.getKhoaHocIds());
        // G·ª≠i email x√°c nh·∫≠n
        emailThanhToanThanhCongService.sendPaymentSuccessEmail(
                taiKhoan.getEmail(),
                taiKhoan.getName(),
                giaoDichKH.getGiaodichId().toString(),
                giaoDichKH.getTongtien().toPlainString(),
                dsKhoaHoc // List<KhoaHoc>
        );

        return ResponseEntity.ok("ƒê√£ l∆∞u chi ti·∫øt giao d·ªãch th√†nh c√¥ng");
    }

    @PostMapping("/api/thanh-toan/that-bai")
    public ResponseEntity<?> xuLyThanhToanThatBai(@RequestBody GiaoDichRequest request) {
        Integer giaoDichId = Integer.valueOf(request.getGiaoDichId());
        Optional<GiaoDichKhoaHoc> optionalGDKH = giaoDichKhoaHocRepository.findById(giaoDichId);

        if (optionalGDKH.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Kh√¥ng t√¨m th·∫•y giao d·ªãch");
        }

        GiaoDichKhoaHoc giaoDichKH = optionalGDKH.get();

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch th√†nh THAT_BAI
        giaoDichKH.setTrangthai(TrangThaiGiaoDich.THAT_BAI);
        giaoDichKhoaHocRepository.save(giaoDichKH);

        return ResponseEntity.ok("ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i cho giao d·ªãch");
    }

}