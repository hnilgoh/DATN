package com.duantn.controllers.controllerGiangVien;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.duantn.entities.GiangVien;
import com.duantn.entities.TaiKhoan;
import com.duantn.entities.RutTienGiangVien;
import com.duantn.services.AuthService;
import com.duantn.services.GiangVienService;
import com.duantn.services.ViGiangVienService;
import com.duantn.services.TokenService;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpServletResponse;

@Controller
@RequestMapping("/giangvien/vi-giang-vien")
public class ViGiangVienController {
    @Autowired
    private ViGiangVienService viGiangVienService;

    @Autowired
    private GiangVienService giangVienService;

    @Autowired
    private TokenService tokenService;

    @Autowired
    private AuthService authService;

    @GetMapping
    public String hienThiVi(Model model) { // model model d√πng ƒë·ªÉ ƒë∆∞a dl t·ª´ BE -> view
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();// l·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p hi·ªán t·∫°i
                                                                                     // trong Spring Security.

        TaiKhoan giangVien = authService.getTaiKhoanFromAuth(auth);// r√∫t ra tk gi·∫£ng vi√™m

        if (giangVien == null) {
            return "redirect:/auth/dangnhap";
        } // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p ‚Üí chuy·ªÉn h∆∞·ªõng sang trang /auth/dangnhap.

        model.addAttribute("soDu", viGiangVienService.tinhSoDu(giangVien));// s·ªë d∆∞ v√≠ hi·ªán t·∫°i (t√≠nh b·∫±ng t·ªïng thu nh·∫≠p
                                                                           // - s·ªë ti·ªÅn ƒë√£ r√∫t).
        model.addAttribute("lichSuThuNhap", viGiangVienService.getLichSuThuNhap(giangVien));
        model.addAttribute("lichSuRutTien", viGiangVienService.getLichSuRutTienThanhCong(giangVien));
        model.addAttribute("yeuCauDangXuLy", viGiangVienService.getYeuCauDangXuLy(giangVien));

        model.addAttribute("tongThuThang", viGiangVienService.getTongThuTrongThang(giangVien));
        model.addAttribute("soLanNhanThang", viGiangVienService.getSoLanNhanTrongThang(giangVien));
        // ƒê·ªï d·ªØ li·ªáu v√†o Model

        return "views/gdienGiangVien/vi-giang-vien";
    }

    @PostMapping("/rut-tien")
    public String guiYeuCauRutTien(@RequestParam("soTienRut") BigDecimal soTienRut) { // l·∫•y gi√° tr·ªã t·ª´ form (input
                                                                                      // name="soTienRut") ‚Üí convert
                                                                                      // sang BigDecimal. ƒê√¢y l√† s·ªë ti·ªÅn
                                                                                      // m√† gv mu·ªën r√∫t
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();// L·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´
                                                                                     // SecurityContextHolder.
        TaiKhoan giangVien = authService.getTaiKhoanFromAuth(auth);// h√†m t·ª± vi·∫øt ƒë·ªÉ chuy·ªÉn t·ª´ th√¥ng tin ƒëƒÉng nh·∫≠p ‚Üí
                                                                   // entity TaiKhoan.

        if (giangVien == null) {
            return "redirect:/auth/dangnhap";
        }

        if (viGiangVienService.guiYeuCauRutTien(giangVien, soTienRut)) {
            return "redirect:/giangvien/vi-giang-vien?success"; // Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß kh√¥ng. Ki·ªÉm tra s·ªë ti·ªÅn c√≥ ‚â•
                                                                // 100,000 kh√¥ng. N·∫øu h·ª£p l·ªá ‚Üí l∆∞u y√™u c·∫ßu r√∫t v√†o DB
                                                                // v·ªõi tr·∫°ng th√°i DANG_CHO_XU_LY.
        }
        return "redirect:/giangvien/vi-giang-vien?error";
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getThongTin(@PathVariable("id") Integer id) {
        GiangVien gv = giangVienService.getById(id);
        if (gv != null) {
            return ResponseEntity.ok(gv); // Spring boot s·∫Ω t·ª± chuy·ªÉn th√†nh JSON
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping("/cap-nhat-ngan-hang")
    public void capNhatThongTinNganHang(
            @RequestParam("soTaiKhoan") String soTaiKhoan,
            @RequestParam("tenNganHang") String tenNganHang,
            @RequestParam("otp") String otp,
            HttpServletResponse response) {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        TaiKhoan taiKhoan = authService.getTaiKhoanFromAuth(auth);

        if (taiKhoan == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // 401
            return;
        }

        boolean valid = tokenService.verifyToken(otp).isPresent();
        if (!valid) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // 401
            return;
        }

        // üîë L·∫•y gi·∫£ng vi√™n t·ª´ t√†i kho·∫£n
        GiangVien gv = giangVienService.getByTaiKhoan(taiKhoan);

        if (gv == null) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST); // 400
            return;
        }

        boolean success = giangVienService.capNhatThongTinNganHang(
                gv.getGiangvienId(), soTaiKhoan, tenNganHang);

        if (success) {
            response.setStatus(HttpServletResponse.SC_OK); // 200
        } else {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST); // 400
        }
    }

    // API l·∫•y th√¥ng tin t√†i kho·∫£n/ng√¢n h√†ng g·∫ßn nh·∫•t
    @GetMapping("/thong-tin-ngan-hang")
    @ResponseBody
    public ResponseEntity<?> getThongTinNganHang() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        TaiKhoan giangVien = authService.getTaiKhoanFromAuth(authentication);

        if (giangVien == null) {
            return ResponseEntity.status(401).body("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p");
        }

        RutTienGiangVien last = viGiangVienService.getLastRutTien(giangVien);
        if (last != null && last.getSoTaiKhoan() != null && last.getTenNganHang() != null) {
            Map<String, String> result = new HashMap<>();
            result.put("soTaiKhoan", last.getSoTaiKhoan());
            result.put("tenNganHang", last.getTenNganHang());
            result.put("readonly", "true");
            return ResponseEntity.ok(result);
        }
        return ResponseEntity.ok().build();
    }

    // API g·ª≠i OTP v·ªÅ email khi r√∫t ti·ªÅn
    @PostMapping("/gui-otp")
    @ResponseBody
    public ResponseEntity<?> guiOtpRutTien(@RequestParam String soTaiKhoan, @RequestParam String tenNganHang) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        TaiKhoan giangVien = authService.getTaiKhoanFromAuth(authentication);

        if (giangVien == null) {
            return ResponseEntity.status(401).body("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p");
        }

        String email = giangVien.getEmail();
        String name = giangVien.getName();
        String subject = "M√£ x√°c th·ª±c r√∫t ti·ªÅn";
        String contentPrefix = "M√£ x√°c th·ª±c r√∫t ti·ªÅn cho t√†i kho·∫£n ng√¢n h√†ng: " + soTaiKhoan + ", ng√¢n h√†ng: "
                + tenNganHang;
        tokenService.generateAndSendToken(email, name, subject, contentPrefix);
        return ResponseEntity.ok().build();
    }

    // API x√°c th·ª±c OTP v√† t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn
    @PostMapping("/xac-thuc-otp")
    @ResponseBody
    public ResponseEntity<?> xacThucOtpRutTien(@RequestParam String soTaiKhoan, @RequestParam String tenNganHang,
            @RequestParam BigDecimal soTienRut, @RequestParam String otp) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        TaiKhoan giangVien = authService.getTaiKhoanFromAuth(authentication);

        if (giangVien == null) {
            return ResponseEntity.status(401).body("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p");
        }

        boolean valid = tokenService.verifyToken(otp).isPresent();
        if (!valid) {
            return ResponseEntity.badRequest().body("M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
        }
        boolean success = viGiangVienService.guiYeuCauRutTienFull(giangVien, soTienRut, soTaiKhoan, tenNganHang);
        if (success) {
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.badRequest().body("S·ªë ti·ªÅn r√∫t kh√¥ng h·ª£p l·ªá ho·∫∑c v∆∞·ª£t qu√° s·ªë d∆∞!");
    }

    // ‚úÖ API g·ª≠i OTP khi ƒë·ªïi STK (kh√°c v·ªõi r√∫t ti·ªÅn)
    @PostMapping("/gui-otp-doi-stk")
    @ResponseBody
    public ResponseEntity<?> guiOtpDoiSTK(@RequestParam String soTaiKhoan, @RequestParam String tenNganHang) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        TaiKhoan giangVien = authService.getTaiKhoanFromAuth(authentication);

        if (giangVien == null) {
            return ResponseEntity.status(401).body("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p");
        }

        String email = giangVien.getEmail();
        String name = giangVien.getName();

        String subject = "M√£ x√°c th·ª±c ƒë·ªïi t√†i kho·∫£n ng√¢n h√†ng";
        String contentPrefix = "M√£ x√°c th·ª±c ƒë·ªÉ ƒë·ªïi t√†i kho·∫£n ng√¢n h√†ng th√†nh: " + soTaiKhoan + ", ng√¢n h√†ng: "
                + tenNganHang;

        tokenService.generateAndSendToken(email, name, subject, contentPrefix);
        return ResponseEntity.ok().build();
    }
}